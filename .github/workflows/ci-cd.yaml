name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecommerce-application
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd application
        npm ci

    - name: Run tests
      run: |
        cd application
        npm test
      env:
        NODE_ENV: test

    - name: Run linting
      run: |
        cd application
        npm run lint
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    - name: Build Docker image
      run: |
        docker build \
          --target production \
          --build-arg NODE_ENV=production \
          --build-arg AWS_REGION=${{ env.AWS_REGION }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Docker image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

    - name: Push image to Amazon ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    # - name: Update deployment manifest
    #   run: |
    #     sed -i "s|REPLACE_IMAGE_TAG|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/deployment.yaml
    #     echo "Updated image tag to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    # - name: Commit updated manifest
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add k8s/deployment.yaml
    #     git commit -m "Update image tag to $IMAGE_TAG" || exit 0
    #     git push || exit 0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # deploy:
  #   name: Deploy to Kubernetes
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}

  #   - name: Setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'latest'

  #   - name: Update kubeconfig
  #     run: |
  #       aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

  #   - name: Deploy to Kubernetes
  #     run: |
  #       kubectl apply -f k8s/
  #       kubectl rollout status deployment/ecommerce-app -n default --timeout=300s