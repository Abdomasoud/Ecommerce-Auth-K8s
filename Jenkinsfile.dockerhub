pipeline {
    agent any
    
    environment {
        // Application Configuration
        APP_NAME = 'ecommerce'
        NODE_VERSION = '18'
        
        // Docker Hub Configuration
        DOCKER_HUB_REGISTRY = 'docker.io'
        DOCKER_HUB_USERNAME = 'abdelrhmanmasoud'
        DOCKER_HUB_REPOSITORY = "${DOCKER_HUB_USERNAME}/${APP_NAME}"
        
        // AWS Configuration (still needed for Secrets Manager)
        AWS_REGION = 'us-east-1'
        
        // Docker Configuration
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT[0..7]}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Checking out code from private GitHub repository"
                    echo "Using automatic SCM checkout"
                    echo "Current workspace: ${env.WORKSPACE}"
                    
                    // Verify checkout - files are in root directory
                    sh 'ls -la'
                    sh 'pwd'
                    
                    // Check if package.json exists
                    sh 'ls -la package.json || echo "package.json not found"'
                    sh 'ls -la Dockerfile || echo "Dockerfile not found"'
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    echo "Setting up Node.js ${NODE_VERSION} environment"
                    // Work in root directory since there's no application subdirectory
                    sh '''
                        # Check if Node.js is available
                        if ! command -v node &> /dev/null; then
                            echo "Node.js is not installed - installing via package manager"
                            
                            # Try to install Node.js (this might fail in restricted environments)
                            curl -fsSL https://deb.nodesource.com/setup_18.x | bash - || echo "Could not install Node.js repository"
                            apt-get update && apt-get install -y nodejs || echo "Could not install Node.js via apt"
                        fi
                        
                        # Check again
                        if command -v node &> /dev/null; then
                            echo "Node.js is available"
                            node --version
                            npm --version
                            
                            # Install dependencies
                            npm ci --production=false || npm install || echo "npm install failed"
                        else
                            echo "Node.js is not available - skipping npm install"
                        fi
                    '''
                }
            }
        }
        
        stage('Validate AWS Access') {
            steps {
                script {
                    echo "Validating AWS credentials and access"
                    // Check if AWS CLI is available
                    sh '''
                        if command -v aws &> /dev/null; then
                            echo "AWS CLI is available"
                        else
                            echo "AWS CLI is not installed - installing"
                            apt-get update && apt-get install -y awscli || echo "Could not install AWS CLI"
                        fi
                    '''
                    
                    // Only run AWS commands if credentials are configured
                    script {
                        try {
                            withCredentials([aws(credentialsId: 'aws-credentials', region: "${AWS_REGION}")]) {
                                sh '''
                                    # Test AWS CLI access
                                    aws sts get-caller-identity || echo "AWS credentials test failed"
                                    
                                    # Test Secrets Manager access
                                    aws secretsmanager list-secrets --max-items 1 --region ${AWS_REGION} || echo "Secrets Manager test failed"
                                '''
                            }
                        } catch (Exception e) {
                            echo "AWS credentials not configured or failed: ${e.message}"
                        }
                    }
                }
            }
        }
        
        stage('Test AWS Connections') {
            steps {
                script {
                    echo "Testing application AWS connections"
                    // Only run if Node.js and test file exists
                    sh '''
                        if command -v node &> /dev/null && [ -f "test-aws-connections.js" ]; then
                            echo "Running AWS connection test"
                            export NODE_ENV=test
                            export AWS_REGION=${AWS_REGION}
                            export USE_SECRETS_MANAGER=true
                            
                            node test-aws-connections.js || echo "AWS connection test failed"
                        else
                            echo "Node.js or test file not available - skipping AWS connection test"
                        fi
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    echo "Running test suite"
                    sh '''
                        if command -v node &> /dev/null && [ -f "package.json" ]; then
                            echo "Running npm tests"
                            export NODE_ENV=test
                            export AWS_REGION=${AWS_REGION}
                            export USE_SECRETS_MANAGER=true
                            
                            # Try different test commands
                            npm run test:ci || npm test || npm run test || echo "Tests completed or not available"
                        else
                            echo "Node.js or package.json not available - skipping tests"
                        fi
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image with AWS configuration"
                    sh '''
                        # Check if Docker is available
                        if ! command -v docker &> /dev/null; then
                            echo "Docker is not installed or not available"
                            echo "Please configure Docker in your Jenkins environment"
                            exit 1
                        fi
                        
                        # Check if Dockerfile exists
                        if [ ! -f "Dockerfile" ]; then
                            echo "Dockerfile not found in current directory"
                            exit 1
                        fi
                        
                        echo "Building Docker image..."
                        # Build the Docker image with build args for AWS region
                        docker build \
                            --build-arg AWS_REGION=${AWS_REGION} \
                            --build-arg NODE_ENV=production \
                            -t ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG} .
                        
                        # Tag as latest
                        docker tag ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG} ${DOCKER_HUB_REPOSITORY}:latest
                        
                        echo "Docker image built successfully"
                        docker images | grep ${DOCKER_HUB_REPOSITORY}
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                            # Check if Docker is available
                            if ! command -v docker &> /dev/null; then
                                echo "Docker is not available for pushing"
                                exit 1
                            fi
                            
                            # Login to Docker Hub
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            
                            # Push images
                            docker push ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG}
                            docker push ${DOCKER_HUB_REPOSITORY}:latest
                            
                            echo "Images pushed successfully to Docker Hub"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Cleaning up workspace"
                
                // Clean up Docker images safely
                sh '''
                    if command -v docker &> /dev/null; then
                        echo "Cleaning up Docker images"
                        docker image prune -f || true
                        docker rmi ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG} || true
                        docker rmi ${DOCKER_HUB_REPOSITORY}:latest || true
                    else
                        echo "Docker not available for cleanup"
                    fi
                '''
            }
        }
        
        success {
            script {
                echo "Pipeline completed successfully!"
                echo "Build ${BUILD_NUMBER} completed successfully"
                echo "Docker image pushed to Docker Hub: ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG}"
            }
        }
        
        failure {
            script {
                echo "Pipeline failed!"
                echo "Build ${BUILD_NUMBER} failed"
                echo "Please check the build logs for more details."
            }
        }
    }
}