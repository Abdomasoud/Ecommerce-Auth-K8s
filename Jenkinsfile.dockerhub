pipeline {
    agent any
    
    tools {
        nodejs 'NODEJS18'
    }
    
    environment {
        // Application Configuration
        APP_NAME = 'ecommerce'
        NODE_VERSION = '18'
        
        // Docker Hub Configuration
        DOCKER_HUB_REGISTRY = 'docker.io'
        DOCKER_HUB_USERNAME = 'abdelrhmanmasoud'
        DOCKER_HUB_REPOSITORY = "${DOCKER_HUB_USERNAME}/${APP_NAME}"
        
        // AWS Configuration (still needed for Secrets Manager)
        AWS_REGION = 'us-east-1'
        
        // Docker Configuration
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT[0..7]}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Checking out code from GitHub repository"
                    
                    // Verify checkout
                    sh '''
                        ls -la
                        ls -la package.json || echo "package.json not found"
                        ls -la Dockerfile || echo "Dockerfile not found"
                    '''
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    echo "Setting up Node.js ${NODE_VERSION} environment"
                    sh '''
                        echo "=== Environment Check ==="
                        echo "Current user: $(whoami)"
                        echo "Available tools:"
                        node --version
                        npm --version
                        command -v docker && echo "Docker: $(docker --version)" || echo "Docker: not available"
                        command -v aws && echo "AWS CLI: $(aws --version)" || echo "AWS CLI: not available"
                        
                        echo "Installing dependencies..."
                        npm install
                    '''
                }
            }
        }
        
        stage('Validate AWS Access') {
            steps {
                script {
                    echo "Checking AWS CLI availability"
                    sh '''
                        command -v aws && echo "AWS CLI available" || echo "AWS CLI not available"
                    '''
                }
            }
        }
        
        stage('Test AWS Connections') {
            steps {
                script {
                    echo "Testing AWS connections"
                    sh '''
                        if [ -f "test-aws-connections.js" ]; then
                            node test-aws-connections.js || echo "AWS connection test failed (continuing pipeline)"
                        else
                            echo "test-aws-connections.js not found - skipping AWS connection tests"
                        fi
                    '''
                }
            }
        }
        
        // stage('Run Tests') {
        //     steps {
        //         script {
        //             echo "Running npm tests"
        //             sh '''
        //                 npm test || echo "Tests failed (continuing pipeline)"
        //             '''
        //         }
        //     }
        // }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        if ! command -v docker &> /dev/null; then
                            echo "Docker is not available"
                            exit 1
                        fi
                        
                        if [ ! -f "Dockerfile" ]; then
                            echo "Dockerfile not found"
                            exit 1
                        fi
                        
                        docker build \
                            --build-arg AWS_REGION=${AWS_REGION} \
                            --build-arg NODE_ENV=production \
                            -t ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG} .
                        
                        docker tag ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG} ${DOCKER_HUB_REPOSITORY}:latest
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                            if ! command -v docker &> /dev/null; then
                                echo "Docker is not available for pushing"
                                exit 1
                            fi
                            
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            
                            docker push ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG}
                            docker push ${DOCKER_HUB_REPOSITORY}:latest
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                if command -v docker &> /dev/null; then
                    docker image prune -f || true
                    docker rmi ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG} || true
                    docker rmi ${DOCKER_HUB_REPOSITORY}:latest || true
                fi
            '''
        }
        
        success {
            echo "Pipeline completed successfully! Image: ${DOCKER_HUB_REPOSITORY}:${DOCKER_IMAGE_TAG}"
        }
        
        failure {
            echo "Pipeline failed! Check build logs for details."
        }
    }
}